// test/functional/login.spec.ts

import { test } from '@japa/runner'
import Route from '@ioc:Adonis/Core/Route'
import Routes from 'App/Config/RouteNames'
import User from 'App/Models/User'
import PasswordReset from 'App/Models/PasswordReset'
import Mail from '@ioc:Adonis/Addons/Mail'
import MailerPresets from 'App/Enums/MailerPresets'

const { DEFAULT_RESET_PASSWORD_SUCCESS_SUBJECT } = MailerPresets

const { password } = Routes
let user: User
let passReset: PasswordReset
let token: string

test.group('PasswordResetController', (group) => {
  group
    .setup(async () => {
      user = await User.create({
        username: 'johndoe',
        email: 'britzdylan@gmail.com',
        password: 'password123',
      })

      await user.save()

      passReset = new PasswordReset()
      passReset.userId = user.id
      await passReset.generateToken()
      await passReset.save()
      token = passReset.token
    })
    .teardown(async () => {
      await user.delete()
      await passReset.delete()
    })

  // should render pass reset request form
  test('should render the password reset view if token is valid', async ({ client }) => {
    const response = await client.get(Route.makeUrl(password.createPassword, [token]))
    response.assertStatus(200)
    response.assertTextIncludes('<h1 class="text-lg">Reset your password</h1>')
  })

  test('should render 404 if token is invalid', async ({ client }) => {
    const response = await client.get(Route.makeUrl(password.createPassword, [`${token}1`]))
    response.assertStatus(404)
  })

  test('should handle password reset, send mails and emit events', async ({ client, assert }) => {
    const mailer = Mail.fake()
    const response = await client.post(Route.makeUrl(password.storePassword, [token])).form({
      password: '987654321',
      password_confirmation: '987654321',
    })
    const updatedPasswordReset = await PasswordReset.findBy('user_id', user.id)

    response.assertTextIncludes('<h1 class="text-xl font-bold mb-4">Login</h1>')
    assert.isTrue(updatedPasswordReset?.isExpired()) // should  be expired
    assert.isTrue(mailer.exists({ subject: DEFAULT_RESET_PASSWORD_SUCCESS_SUBJECT }))

    Mail.restore()
  })

  test('should render the expired link view if link is expired', async ({ client }) => {
    await passReset.useToken()
    await passReset.save()
    const response = await client.get(Route.makeUrl(password.createPassword, [token]))
    response.assertStatus(200)
    response.assertTextIncludes(
      '<h1>Oops it seems like this link has expired, please try again</h1>'
    )
  })
})
