// test/functional/login.spec.ts

import { test } from '@japa/runner'
import Route from '@ioc:Adonis/Core/Route'
import Routes from 'App/Config/RouteNames'
import User from 'App/Models/User'
import PasswordReset from 'App/Models/PasswordReset'
import Mail from '@ioc:Adonis/Addons/Mail'
import MailerPresets from 'App/Enums/MailerPresets'

const { DEFAULT_RESET_PASSWORD_SUBJECT } = MailerPresets

const { password } = Routes
let user: User
let passReset: PasswordReset
let token: string

test.group('PasswordResetRequestController', (group) => {
  group
    .setup(async () => {
      user = await User.create({
        username: 'johndoe',
        email: 'britzdylan@gmail.com',
        password: 'password123',
      })

      await user.save()

      passReset = new PasswordReset()
      passReset.userId = user.id
      await passReset.generateToken()
      await passReset.save()
      token = passReset.token
    })
    .teardown(async () => {
      await user.delete()
      await passReset.delete()
    })

  // should render pass reset request form
  test('should render the pass reset request view', async ({ client }) => {
    const response = await client.get(Route.makeUrl(password.createReset))
    response.assertStatus(200)
    response.assertTextIncludes('<h1 class="text-lg">Forgot your password?</h1>')
  })

  test('should handle pass reset request, emit events and send mail', async ({
    client,
    assert,
  }) => {
    const mailer = Mail.fake()
    await client.post(Route.makeUrl(password.storeReset)).form({
      email: user.email,
    })

    const passReset = await PasswordReset.findBy('user_id', user.id)
    assert.exists(passReset) // should exist
    assert.isFalse(passReset?.isExpired()) // should not be expired
    assert.isFalse(await passReset?.verifyToken(token)) // tokens should not match from old and new pass reset requests
    assert.isTrue(mailer.exists({ subject: DEFAULT_RESET_PASSWORD_SUBJECT }))

    Mail.restore()
  })
})
