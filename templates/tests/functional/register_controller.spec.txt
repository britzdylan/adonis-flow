import { test } from '@japa/runner'
import Route from '@ioc:Adonis/Core/Route'
import Routes from 'App/Config/RouteNames'
import User from 'App/Models/User'
import FlashMessage from 'App/Enums/FlashMessage'
import Mail from '@ioc:Adonis/Addons/Mail'
import MailerPresets from 'App/Enums/MailerPresets'

const { DEFAULT_WELCOME_SUBJECT } = MailerPresets
const { home, register } = Routes
let user: User

test.group('Register controller', (group) => {
  group
    .setup(async () => {
      user = await User.create({
        username: 'dylandoe',
        email: 'britzdylan@gmail.com',
        password: 'password123',
      })

      await user.save()
    })
    .teardown(async () => {
      await user.delete()
    })
  test('should render the register view', async ({ client }) => {
    const response = await client.get(Route.makeUrl(register.create))
    response.assertStatus(200)
    response.assertTextIncludes('<h1>Register</h1>')
  })

  test('should handle invalid data', async ({ client, assert }) => {
    await client.post(Route.makeUrl(register.store)).form({
      username: 'johndoe',
      email: 'britzdylan@gmail.com',
      password: 'passw',
      password_confirmation: 'password123',
    })

    const userThatShouldntExist = await User.findBy('username', 'johndoe')
    assert.isNull(userThatShouldntExist)
  })

  test('should register a new user, redirect to home and send mail', async ({ client, assert }) => {
    const mailer = Mail.fake()
    const response = await client.post(Route.makeUrl(register.store)).form({
      username: 'johndoe2',
      email: 'britzdylan2@gmail.com',
      password: 'password1234',
      password_confirmation: 'password1234',
    })

    // console.log(response.dumpBody())
    response.assertRedirectsTo(Route.makeUrl(home.index))

    assert.isTrue(mailer.exists({ subject: DEFAULT_WELCOME_SUBJECT }))

    Mail.restore()
  })

  test('Should generate a verification token when a user is created', async ({ assert }) => {
    assert.exists(user.emailVerificationToken)
  })

  test('Should verify email', async ({ client }) => {
    const response = await client.get(
      Route.makeUrl(verification.confirm, [user.emailVerificationToken])
    )

    response.assertStatus(200)
    response.assertTextIncludes(FlashMessage.EmailVerified)
  })
  // should throw an error if user already exists
})
