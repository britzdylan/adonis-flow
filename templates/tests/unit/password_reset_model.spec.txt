// test/unit/PasswordResetModel.spec.ts

import { test } from '@japa/runner'
import User from 'App/Models/User'
import PasswordReset from 'App/Models/PasswordReset'
import { DateTime } from 'luxon'

let user: User
let passwordReset: PasswordReset

test.group('PasswordReset Model', (group) => {
  group
    .setup(async () => {
      user = await User.create({
        username: 'johndoe',
        email: 'britzdylan@gmail.com',
        password: 'password123',
      })

      await user.save()

      passwordReset = new PasswordReset()

      passwordReset.userId = user.id
      passwordReset.generateToken()

      await passwordReset.save()
    })
    .teardown(async () => {
      await user.delete()
      await passwordReset.delete()
    })
  test('should correctly relate to a User', async ({ assert }) => {
    const retrievedPasswordReset = await PasswordReset.find(passwordReset.id)
    const retrievedUser = await retrievedPasswordReset!.related('user').query().first()

    assert.exists(retrievedUser)
    assert.equal(retrievedUser!.id, user.id)
  })

  test('should correctly generate a token', async ({ assert }) => {
    const token = passwordReset.token

    assert.exists(token)
  })

  test('should correctly check if token is expired', async ({ assert }) => {
    assert.isFalse(passwordReset.isExpired())
    passwordReset.expiresAt = DateTime.local().minus({ hours: 2 })
    assert.isTrue(passwordReset.isExpired())
  })

  test('should not insert a new row if a password reset already exists for the user', async ({
    assert,
  }) => {
    const passwordReset2 = new PasswordReset()
    passwordReset2.userId = user.id
    passwordReset2.generateToken()

    assert.rejects(() => passwordReset2.save())
  })
})
