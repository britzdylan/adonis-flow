import type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'
import { Exception } from '@adonisjs/core/build/standalone'
import Event from '@ioc:Adonis/Core/Event'
import PasswordReset from 'App/Models/PasswordReset'
import PasswordValidator from 'App/Validators/User/PasswordValidator'
import FlashMessage from 'App/Enums/FlashMessage'
import flowConfig from 'Config/flow'

const { passwordReset, signedUrlInvalid } = flowConfig.views
const { PasswordResetSuccess } = FlashMessage

export default class PasswordResetsController {
  /**
   * Renders the password reset view with the provided token.
   */
  public async create({ view, request }: HttpContextContract): Promise<string> {
    const token = request.param('token')
    const passwordResetRequest = await PasswordReset.findByOrFail('token', token)

    if (passwordResetRequest.isExpired()) {
      throw new Exception('URLhas expired', 403, 'E_INVALID_URL')
    }

    if (!(await passwordResetRequest.verifyToken(token))) {
      throw new Exception('Invalid URL', 403, 'E_INVALID_URL')
    }

    return view.render(passwordReset, { token: token })
  }

  /**
   * Handles the password reset form submission.
   *   */
  public async store({ request, response, session, auth }: HttpContextContract): Promise<void> {
    const token = request.param('token')
    const passwordReset = await PasswordReset.findByOrFail('token', token)
    const { password } = await request.validate(PasswordValidator)
    const user = await passwordReset.related('user').query().firstOrFail()
    await auth.logout()

    user.merge({ password: password })
    await user.save()

    Event.emit('user:resetPassword', { user, passwordReset })

    session.flash({
      success: [PasswordResetSuccess],
    })

    return response.redirect().toRoute('login.create')
  }

  public async renderInvalidToken({ view, request }: HttpContextContract): Promise<string> {
    const message = request.qs().message || 'Invalid URL'
    const status = 403
    return view.render(signedUrlInvalid, { message, status })
  }
}
