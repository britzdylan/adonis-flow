import { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'
import User from 'App/Models/User'
import flowConfig from 'Config/flow'
import Encryption from '@ioc:Adonis/Core/Encryption'
import { DateTime } from 'luxon'

const { confirmPassword } = flowConfig.views

/**
 * Controller for registering and verifying users.
 */
export default class PasswordConfirmationController {
  /**
   * Renders the registration view.
   */
  public async create({ view, request }: HttpContextContract): Promise<string> {
    return view.render(confirmPassword, { intendedRoute: request.params().intended })
  }

  /**
   * Validates user password and redirect to intended route
   */
  public async store({ request, response, session, auth }: HttpContextContract): Promise<void> {
    const { intended } = request.params()
    const password = await request.input('password')
    const user = auth.user as User
    const isSame = await user.verifyPassword(password)

    if (!isSame) {
      session.flash('error', 'Password does not match')
      return response.redirect().back()
    }

    session.put('password-confirmed', DateTime.now().toISO()!)

    return response.redirect(Encryption.decrypt(intended)!)
  }
}
