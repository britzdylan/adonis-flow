import { DateTime } from 'luxon'
import { BaseModel, column, belongsTo, BelongsTo, computed } from '@ioc:Adonis/Lucid/Orm'
import { string } from '@ioc:Adonis/Core/Helpers'
import User from 'App/Models/User'
import Encryption from '@ioc:Adonis/Core/Encryption'
export default class PasswordReset extends BaseModel {
  @column({ isPrimary: true })
  public id: number

  @column()
  public userId: number

  @column()
  public token: string

  @column.dateTime({ autoCreate: true })
  public createdAt: DateTime

  @column.dateTime({ autoCreate: true, autoUpdate: true })
  public updatedAt: DateTime

  @column.dateTime()
  public expiresAt: DateTime

  @belongsTo(() => User)
  public user: BelongsTo<typeof User>

  @computed()
  public isExpired(): boolean {
    return this.expiresAt.toMillis() < DateTime.local().toMillis()
  }

  public async generateToken(): Promise<void> {
    this.token = Encryption.encrypt(string.generateRandom(40))
    this.expiresAt = DateTime.local().plus({ hours: 2 })
  }

  public async useToken(): Promise<void> {
    this.expiresAt = DateTime.local().minus({ hours: 1 })
  }

  public async verifyToken(token: string): Promise<boolean> {
    return Encryption.decrypt(token) === Encryption.decrypt(this.token)
  }
}
