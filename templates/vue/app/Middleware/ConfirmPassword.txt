import type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'
import Encryption from '@ioc:Adonis/Core/Encryption'
import { DateTime } from 'luxon'
import flowConfig from 'Config/flow'

const { passwordConfirmation } = flowConfig.features
export default class ConfirmPassword {
  public async handle(
    { request, response, session }: HttpContextContract,
    next: () => Promise<void>
  ) {
    const lastVerifiedAt = session.get('password-confirmed')
    const fromUrl = request
      .header('referer')
      ?.replace('http://', '')
      .replace('https://', '')
      .replace(request.header('host')!, '')

    const runRedirect = () =>
      response.redirect().toRoute('password.confirm', [Encryption.encrypt(request.url())], {
        qs: { fromUrl },
      })

    if (!lastVerifiedAt) {
      return runRedirect()
    }

    const diff = DateTime.now().diff(DateTime.fromISO(lastVerifiedAt))
    if (diff.minutes > passwordConfirmation) {
      return runRedirect()
    }

    await next()
  }
}
