import type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'
import Event from '@ioc:Adonis/Core/Event'
import Route from '@ioc:Adonis/Core/Route'
import User from 'App/Models/User'
import PasswordReset from 'App/Models/PasswordReset'
import flowConfig from 'Config/flow'
import FlashMessage from 'App/Enums/FlashMessage'
import EmailVerificationValidator from 'App/Validators/Auth/EmailVerificationValidator'

const { PasswordResetRequested } = FlashMessage
const { passwordResetRequest } = flowConfig.views

/**
 * Controller for handling password reset requests.
 */
export default class PasswordResetRequestController {
  /**
   * Renders the password reset request view.
   */
  public async create({ inertia }: HttpContextContract) {
    return inertia.render(passwordResetRequest, { formUrl: Route.makeUrl('password.storeReset') })
  }

  /**
   * Handles the submission of a password reset request form.
   */
  public async store({ request, response, session, auth }: HttpContextContract): Promise<void> {
    const { email } = await request.validate(EmailVerificationValidator)

    const user = await User.findBy('email', email)
    if (user) {
      await PasswordReset.query().where('user_id', user.id).delete()

      const newRequest = new PasswordReset()
      newRequest.userId = user.id
      await newRequest.generateToken()
      await newRequest.save()

      Event.emit('user:resetPasswordRequest', { user, token: newRequest.token })
    }
    session.flash({
      success: [PasswordResetRequested],
    })

    await auth.logout()

    return response.redirect().back()
  }
}
